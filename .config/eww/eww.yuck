(defwindow example
    :monitor 0
    :class "example"
    :geometry (geometry :x "0%"
                        :y "0px"
                        :width "100%"
                        :height "30px"
                        :anchor "top center")
    :windowtype "dock"
    :stacking "fg"
    :exclusive true
(bar))

    (defwindow cal
        :monitor 0
        :class "cal"
        
        :geometry (geometry :x "50%"
                            :y "0px"
                            :width "1"
                            :height "1"
                            :anchor "top center")
        :stacking "fg"
        (eventbox
            :onhover "${EWW_CMD} update cal=true"
            :onhoverlost "${EWW_CMD} update cal=false"
    (calendar
        :visible {cal})))



    (defwindow wifi
        :monitor 0
        :class "wifi"
        
        :geometry (geometry :x "230"
                            :y "1px"
                            :width "1"
                            :height "1"
                            :anchor "top right")
        :stacking "fg"
      (wifilist))
(defwidget wifilist []
    (revealer 
        :transition "slidedown"
			  :reveal wifi
			  :duration "1s"
    (eventbox
        :onhover "${EWW_CMD} update wifi=true"
        :onhoverlost "${EWW_CMD} update wifi=false"
(box :class "wifi-list"
    :visible {wifi}
    :orientation "v"
    (for wi in {network.wifis}
        (eventbox 
            :onclick "${EWW_CMD} update wifi=false &&  nmcli dev wifi connect '${wi.ssid}'"
            :class {wi.active ? 'box active' : 'box'}
             (box "${wi.ssid}"))
    )))))   



    (defwidget bar []
        (centerbox
        (workspaces)
        (center)
        (info)
          ))


(defwidget workspaces []
    (box
        :orientation "h"
        :space-evenly false
        :hexpand true
    
    (box :class "workspaces"
         :orientation "h"
         :space-evenly true
         :halign "start"
         :spacing 15
         (for ws in wss
            (box
                :class {ws.active ? "active" : "box"}
            {ws.icon})
        )
        
    )
    (spotify
        )
    )
)

(defwidget spotify []
    
    (box
        :class "spotify"
        :halign "center"
        :hexpand true
        :space-evenly false
        :visible {spotify.play}

    (box
        :class "spotify-status"
        :space-evenly false
        (button 
                :class "spotify-status-btn"
                :onclick "playerctl play-pause"
                :timeout "2s"
            "${spotify.status == 'Playing' ? '' : ''} " )
            (button 
                :class "spotify-status-btn"
            "${spotify.shuffle ? '咽 ' : ''}" )
            (button 
                :class "spotify-status-btn"
            "${spotify.repeat ? '凌' : ''}" )
    )

    (box 
           
            "${spotify.track} ")
        )
)

(defwidget center []
    (eventbox
        :timeout "5s"
        :onhover "${EWW_CMD} update cal=true"
        :onhoverlost "${EWW_CMD} update cal=false"
        (time)
          )
)


(defwidget time []
    (box :class "time"
    
         :halign "center"
         :spacing 15
            {time})
)

(defwidget info []
    (box :class "info"
         :orientation "h"
         :space-evenly false
         :halign "end"
         :spacing 15
        (network)
        (battery)
        (sound)
    )
)

(defwidget network []
    (eventbox
        :onclick "${EWW_CMD} update wifi=true"
       
        (box
        (box 
            :class "network"
            :visible {network.active != false}
            "${network.active.ssid} (${network.active.signal}%)  "
        )
        (box
            :class "network"
            :visible {network.active == false}
            ""
        ))
    )
)

(defwidget battery []
    (box 
        :class "battery"
        "${battery.icon}   ${battery.battery}% ${battery.charging ? '' : ''}"
    )
)

(defwidget sound []
    (box 
        :class "sound"
        "墳 ${sound.volume}"
    )
)

(defvar cal false)
(defvar wifi false)

(defpoll wss :interval "100ms" :initial "[]"
    "scripts/workspaces")

(defpoll time :interval "10s"
    "date '+%H:%M %b %d, %Y'")

(defpoll network :interval "1s" :initial "{\"signal\": 0}"
    "scripts/network")

(defpoll battery :interval "1s" 
    "scripts/battery")

(defpoll sound :interval "100ms" :initial "{\"volume\": 0}"
    "scripts/sound")

(defpoll spotify :interval "1s" 
    "scripts/spotify")
